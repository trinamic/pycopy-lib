import ure

opmap = {}
opname = [None] * 256
op_implicit_arg = [None] * 256


with open("../../pycopy/py/bc0.h") as f:
    for l in f:
        m = ure.match(r"#define +MP_BC_([A-Z_]+) +\((.+?)\)", l)
        if not m:
            continue
#        print(m.group(1), m.group(2))
        name, val = m.group(1), m.group(2)
        val = int(val)
#        print(name, val)
        opmap[name] = val
        opname[val] = name

UNARY_OP_MULTI = opmap["UNARY_OP_MULTI"]
BINARY_OP_MULTI = opmap["BINARY_OP_MULTI"]
with open("../../pycopy/py/runtime0.h") as f:
    want_unary = True
    want_binary = True
    cnt = 0

    for l in f:
        if want_unary:
            m = ure.match(r" +MP_UNARY_OP_([A-Z_]+)", l)
            if m:
                op = m.group(1)
                if op == "NUM_BYTECODE":
                    want_unary = False
                    cnt = 0
                    continue
#                print(op)
                opname[UNARY_OP_MULTI + cnt] = "UNARY_" + op
                cnt += 1
        if want_binary:
            m = ure.match(r" +MP_BINARY_OP_([A-Z_]+)", l)
            if m:
                op = m.group(1)
                if op == "NUM_BYTECODE":
                    want_binary = False
                    cnt = 0
                    continue
#                print(op)
                if not op.startswith("INPLACE"):
                    op = "BINARY_" + op
                opname[BINARY_OP_MULTI + cnt] = op
                cnt += 1


LOAD_CONST_SMALL_INT_MULTI = opmap["LOAD_CONST_SMALL_INT_MULTI"]
for i in range(64):
    # Drop multi from opcode name
    opname[LOAD_CONST_SMALL_INT_MULTI + i] = "LOAD_CONST_SMALL_INT"
    op_implicit_arg[LOAD_CONST_SMALL_INT_MULTI + i] = i - 16

LOAD_FAST_MULTI = opmap["LOAD_FAST_MULTI"]
for i in range(16):
    opname[LOAD_FAST_MULTI + i] = "LOAD_FAST_MULTI"
    op_implicit_arg[LOAD_FAST_MULTI + i] = i

STORE_FAST_MULTI = opmap["STORE_FAST_MULTI"]
for i in range(16):
    opname[STORE_FAST_MULTI + i] = "STORE_FAST_MULTI"
    op_implicit_arg[STORE_FAST_MULTI + i] = i


print("# This file is autogenerated")

print("opmap = {")
for k, v in sorted(opmap.items()):
    print('"%s": 0x%x,' % (k, v))
print("}\n")

def dump_256_array(arr):
    print("[")
    cnt = 0
    for val in arr:
        if cnt % 8 == 0:
            print("# 0x%02x" % cnt)
        print("%r, " % val, end="")
        cnt += 1
        if cnt % 8 == 0:
            print()
    print("]")


print("opname = ", end="")
dump_256_array(opname)
print()

print("op_implicit_arg = ", end="")
dump_256_array(op_implicit_arg)
